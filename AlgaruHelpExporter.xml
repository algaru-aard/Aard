<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Friday, April 21, 2023, 5:34 PM -->
<!-- MuClient version 5.07-pre -->

<!-- Plugin "AlgaruHelpExporter" generated by Plugin Wizard -->

<muclient>
<plugin
   name="AlgaruHelpExporter"
   author="Algaru"
   id="ba8e8641c467ac1034592dcc"
   language="Lua"
   purpose="Export Help Files to Disk"
   date_written="2023-04-21 17:33:53"
   requires="5.07"
   version="1.0"
   >
<description trim="y">

<![CDATA[
--------------------------------------------------------------------------------
Help File Exporter
--------------------------------------------------------------------------------

Use this plugin to copy help files to disk. 

Usage::
    capturehelp index <letter> - dump all the helps starting with <letter>
    capturehelp updated <#>    - dump helps updated in the last # days
    capturehelp help           - display this help

 I recommend sitting still while doing this for best results.
 Walking around will probably be ok.
 Skills/spells will likely result in inconsistent output.
 
 If you see an error like that says "No such file or directory", reinstall the
 plugin and retry the command. It's likely an issue with creating the help 
 directory and should be fixed on retry. 
 
 If you see the above or any other issues, send Algaru a note or tell. Enjoy!    

--------------------------------------------------------------------------------    
]]> 
</description>

</plugin>

<aliases>
  <alias match='^capturehelp index (?<letter>\w{1})[ ]*$'  
    enabled = 'y' 
    ignore_case = 'y' 
    sequence = '100' 
    send_to='12'
    regexp='y'
    script="begin_help_script">
  </alias>

  <alias match='^capturehelp updated (?<days>\d+)[ ]*$'  
    enabled = 'y' 
    ignore_case = 'y' 
    sequence = '100' 
    send_to='12'
    regexp='y'
    script="begin_updated_script">
  </alias> 
 
  <alias match='^capturehelp help[ ]*$'  
    enabled = 'y' 
    ignore_case = 'y' 
    sequence = '100' 
    send_to='12'
    regexp='y'
    >
    <send>
        OnHelp()
    </send>
  </alias>
</aliases>

<triggers>
  <trigger
    enabled="n"
    match="^{help}$"
    regexp="y"
    name="start_single_help"
    group="capture_single_help_group"
    send_to="12"
    sequence="2"
    omit_from_output="y"
  >
  <send>
    help_data = {}
    EnableTrigger("end_single_help", true)
    EnableTrigger("capture_line_from_help", true)
  </send>
  </trigger> 
  <trigger
    enabled="n"
    match="{/help}"
    regexp="n"
    name="end_single_help"
    send_to="12"
    sequence="1"
    group="capture_single_help_group"
    script="end_single_help"
    omit_from_output="y"
    >
  <send>
    EnableTrigger("end_single_help", false)
    EnableTrigger("capture_line_from_help", false)
  </send>
  </trigger> 
  <trigger
    enabled="n"
    match="^.*$"
    regexp="y"
    name="capture_line_from_help"
    group="capture_single_help_group"
    send_to="10"
    sequence="100"
    script="capture_line_from_help"
    omit_from_output="y"
    >
  </trigger> 
  <trigger
    enabled="n"
    match="^(?<help_string>[^:]{20}):"
    regexp="y"
    name="capture_name_from_index"
    group="capture_index_group"
    script="capture_string_from_index"
    send_to="10"
    sequence="100"
    >
  </trigger>
  <trigger
    enabled="n"
    omit_from_output="y"
    match="^DONE WITH INDEX SEARCH$"
    regexp="y"
    name="stop_index_capture"
    group="capture_index_group"
    script="stop_index_capture"
    send_to="10"
    sequence="1"
    >
  </trigger> 
  <trigger
    enabled="n"
    omit_from_output="y"
    match="^DONE WITH UPDATED SEARCH$"
    regexp="y"
    name="stop_updated_capture"
    group="capture_updated_group"
    script="stop_updated_capture"
    send_to="12"
    sequence="1"
    >
   <send>
    help_data = {}
    EnableTrigger("end_single_help", true)
    EnableTrigger("capture_line_from_help", true)
  </send>
  </trigger>
  
  <trigger
    enabled="n"
    match="^{helpsearch}$"
    regexp="y"
    name="capture_help_updated_search"
    group="capture_updated_group"
    send_to="12"
    sequence="2"
    omit_from_output="y"
  >
  <send>
    help_data = {}
    EnableTrigger("capture_name_from_updated", true)
    EnableTrigger("stop_capture_help_updated_search", true)
  </send>
  </trigger> 

  <trigger
    enabled="n"
    match="^{/helpsearch}$"
    regexp="y"
    name="stop_capture_help_updated_search"
    group="capture_updated_group"
    send_to="12"
    sequence="2"
    omit_from_output="y"
  >
  <send>
    help_data = {}
    EnableTrigger("capture_name_from_updated", false)
  </send>
  </trigger> 
  
  <trigger
    enabled="n"
    match="^(?<help_string>.{20}) \d{2}\/\d{2}\/\d{2} \d{2}:\d{2}  .{50}$"
    regexp="y"
    name="capture_name_from_updated"
    script="capture_string_from_updated"
    send_to="10"
    sequence="100"
    >
  </trigger>
  
  <trigger
    enabled="y"
    omit_from_output="y"
    match="^Finished Parsing Helps$"
    regexp="y"
    name="stop_help_processing"
    script="stop_help_processing"
    send_to="10"
    sequence="1"
    >
  </trigger>    
</triggers>

<script>
<![CDATA[   

    require "gmcphelper"
    -- Below has some helpers to dump arrays or tables
    -- require "algaru_common"
    
    list_of_helps = {}
    help_data = {}
    WAIT_TIME=1
    
    function begin_updated_script (name, line, args)
        list_of_helps = {}
        help_data = {}
        days = args.days
        EnableTriggerGroup("capture_updated_group", true)
        SendNoEcho("tags helps on") 
        Send("help updated " .. days)        
        SendNoEcho("echo DONE WITH UPDATED SEARCH")
    end
    
    function begin_help_script (name, line, args)
        list_of_helps = {}
        help_data = {}
        ColourNote("white", "", "Capturing the following help files:")
        SendNoEcho("index " .. args.letter)
        SendNoEcho("tags helps on")
        EnableTriggerGroup("capture_index_group", true)
        SendNoEcho("echo DONE WITH INDEX SEARCH")
    end
    
    function end_single_help (name, line, args)
        print_to_file(array_copy(help_data))
    end
    
    function capture_string_from_index (name, line, args)
        table.insert(list_of_helps, trim_space(args.help_string))
    end

    function capture_string_from_updated (name, line, args)
        table.insert(list_of_helps, trim_space(args.help_string))
    end
    
    function stop_index_capture (name, line, args)
        EnableTriggerGroup("capture_index_group", false)
        EnableTriggerGroup("capture_single_help_group", true)
        process_helps()
    end
    
    function stop_updated_capture ()
        EnableTriggerGroup("capture_index_group", false)
        EnableTriggerGroup("capture_single_help_group", true)
        process_helps()
    end
    
    function process_helps ()
        require "wait"
        wait.make (function()
            for _, help_topic in ipairs (list_of_helps) do
                SendNoEcho("help " .. help_topic)
                wait.time(WAIT_TIME)
            end

            SendNoEcho("echo Finished Parsing Helps")
            SendNoEcho("tags helps off")
        end)                
    end
    
    function capture_line_from_help (name, line, args)
        table.insert(help_data, line)
    end
    
    function stop_help_processing ()
        EnableTriggerGroup("capture_single_help_group", false)  
    end

    
    function trim_space(s)
        return (s:gsub("^%s*(.-)%s*$", "%1"))
    end
    
    function array_copy(old)
        new_array = {}
        for _, value in ipairs(old) do
            table.insert(new_array, value)
        end
        return new_array
    end
    
    --- Here be dragons... --- 
    function print_to_file (help_array)
        require "wait"
        wait.make (function()
        
            second_line = help_array[2]
            
            -- Every help will start with this, can build keywords by looking at this line
            sentinel = '{helpkeywords}Help Keywords : '
            keywords = string.lower(string.sub(second_line, string.len(sentinel), string.len(second_line)))
            filename = keywords:gsub('%W', '') .. ".txt"
            first_letter = string.sub(filename,1,1)
            base_dir = GetInfo(68)
            new_dir = "helps\\" .. first_letter
            mkdir_cmd = "/C mkdir " .. new_dir
        
            -- bit of a hack here. shellexecute seems to be async
            -- need to wait enough time for the directory to be created 
            utils.shellexecute("cmd", mkdir_cmd, base_dir, "open", 0)
            wait.time(.1)

            pathed_file = base_dir .. 'helps\\' .. first_letter .. '\\' .. filename;

            help_file = assert(io.open(pathed_file, "w"))
            ColourNote("white", "", "Opened " .. pathed_file .. " for write.")

            for _, line in ipairs(help_array) do
                if (string.match(line, '{helpbody}') or string.match(line, '{/helpbody}')) then goto continue end
                line = string.gsub(line, '{helpkeywords}', '')
                -- Note(line)
                help_file:write(line .. "\r")
                ::continue::
            end
            help_file:close()
        end)
    end

    function OnHelp ()
        ColourNote ("LightSteelBlue", "", world.GetPluginInfo (world.GetPluginID (), 3))
    end

    function OnPluginEnable()
        OnHelp()
    end

    function OnPluginInstall()
        OnHelp()
    end
        
]]>

</script>
</muclient>

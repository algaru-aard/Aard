<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Saturday, July 01, 2023, 6:28 AM -->
<!-- MuClient version 5.07-pre -->

<!-- Plugin "AlgaruBlackClawCrag" generated by Plugin Wizard -->

<muclient>
<plugin
   name="AlgaruBlackClawCrag"
   author="Algaru"
   id="a07b5ffbdc505b77d60fb803"
   language="Lua"
   purpose="Helper plugin for Black Claw Crag"
   date_written="2023-07-01 06:27:43"
   requires="5.07"
   version="1.0"
   >

<description trim="y">

<![CDATA[
This plugin includes some helper functions for Black Claw Crag.
It also stores and displays your run statistics. 

For proper stat reporting, make sure to start all runs with "atc"

Non-battle commands:
    axhelp          -   Display this help
    atc             -   Alias to touch the crystal
    axtime          -   Display how much time is left before you can challenge again
    axgo            -   Run to Black Claw Crag (requires mapper)
    axstats         -   Print a table showing your run stats (Requires at least 1 run)

Battle commands: 
    axrun           -   Display the time of your current run
    axdir           -   Display where Axaldra is flying currently

Debug commands:
    axdebug         -   Print the state of all current variables
    axreset confirm -   Reset all stats (not reversible!)        
]]> 
</description>

</plugin>


<aliases>
    <alias match='^[ ]*axgo[ ]*$'  
        enabled = 'y' 
        ignore_case = 'y' 
        sequence = '100' 
        send_to='10'
        regexp='y'
        >
        <send>mapper goto 25337</send>
    </alias>
    <alias match='^[ ]*axhelp[ ]*$'  
        enabled = 'y' 
        ignore_case = 'y' 
        sequence = '100' 
        send_to='12'
        regexp='y'
        script="OnHelp">
    </alias>
    <alias match='^[ ]*axdir[ ]*$'  
        enabled = 'y' 
        ignore_case = 'y' 
        sequence = '100' 
        send_to='12'
        regexp='y'
        script="get_axaldra_direction">
    </alias>
    <alias match='^[ ]*axrun[ ]*$'  
        enabled = 'y' 
        ignore_case = 'y' 
        sequence = '100' 
        send_to='12'
        regexp='y'
        script="report_axaldra_run">
    </alias>
    <alias match='^[ ]*axtime[ ]*$'  
        enabled = 'y' 
        ignore_case = 'y' 
        sequence = '100' 
        send_to='12'
        regexp='y'
        script="report_axaldra_timer">
    </alias>
    <alias match='^[ ]*atc[ ]*$'  
        enabled = 'y' 
        ignore_case = 'y' 
        sequence = '100' 
        send_to='12'
        regexp='y'
        script="axaldra_touch_crystal">
    </alias>
    <alias match='^[ ]*touch crystal[ ]*$'  
        enabled = 'y' 
        ignore_case = 'y' 
        sequence = '100' 
        send_to='12'
        regexp='y'
        script="axaldra_touch_crystal">
    </alias>
    <alias match='^[ ]*axstats[ ]*$'  
        enabled = 'y' 
        ignore_case = 'y' 
        sequence = '100' 
        send_to='12'
        regexp='y'
        script="axaldra_report_stats">
    </alias>
    <alias match='^[ ]*axdebug[ ]*$'  
        enabled = 'y' 
        ignore_case = 'y' 
        sequence = '100' 
        send_to='12'
        regexp='y'
        script="axaldra_debug">
    </alias>
    <alias match='^axreset confirm$'  
        enabled = 'y' 
        ignore_case = 'y' 
        sequence = '100' 
        send_to='12'
        regexp='y'
        script="axaldra_reset">
    </alias>
</aliases>

<triggers>
  <trigger
   enabled="y"
   match="^You reach out and touch the crystal, which feels warm to the touch and is"
   regexp="y"
   name="touch_crystal"
   send_to="12"
   sequence="100"
   script="axaldra_init"
  >
  </trigger>
  
  <trigger
   enabled="y"
   match="^Axaldra, the Eternal One lifts off from her perch and flies (?<dir>.*).$"
   regexp="y"
   name="set_axaldra_direction"
   send_to="12"
   sequence="100"
   script="set_axaldra_direction"
  >
  </trigger>
  
  <trigger
   enabled="y"
   match="^You hear a faint whisper in your ear, warning you not to return for 20 minutes.$"
   regexp="y"
   name="end_blackclaw"
   send_to="12"
   sequence="100"
   script="end_blackclaw"
  >
  </trigger>
  
  <trigger
   enabled="y"
   match="You get (?<flag>[^ ]*)[ ]?a jagged shard of obsidian from the corpse of A mortally wounded adventurer."
   regexp="y"
   name="store_weapon_stats"
   send_to="12"
   sequence="100"
   script="store_weapon_stats"
  >
  </trigger>

  <trigger
   enabled="y"
   match="^Perhaps waiting (?<minutes>[\d]+) minute[s]? and (?<seconds>[\d]+) second[s]? will work.$"
   regexp="y"
   name="ax_update_timer1"
   send_to="12"
   sequence="100"
   script="ax_update_timer"
  >
  </trigger>
  <trigger
   enabled="y"
   match="^Perhaps waiting (?<minutes>[\d]+) minute[s]? will work.$"
   regexp="y"
   name="ax_update_timer2"
   send_to="12"
   sequence="100"
   script="ax_update_timer"
  >
  </trigger>    
  <trigger
   enabled="y"
   match="^Perhaps waiting (?<seconds>[\d]+) second[s]? will work.$"
   regexp="y"
   name="ax_update_timer3"
   send_to="12"
   sequence="100"
   script="ax_update_timer"
  >
  </trigger>      
</triggers>

<script>
<![CDATA[  
    require "gmcphelper"
    -- require "algaru_common"
    path = GetPluginInfo (GetPluginID (), 20)
    require "var"
    require "serialize"

    function axaldra_touch_crystal ()
        Send("touch crystal")
        axaldra_init()
    end
    
    function axaldra_init()
        start_time = os.time()
        SetVariable("axaldra_start_time", start_time)
        SaveState()    
    end
    
    function set_axaldra_direction (name, line, args)
        direction = args.dir
        SetVariable("axaldra_dir", direction)
        SaveState()
    end
    
    function get_axaldra_direction ()
        if (in_blackclaw() == false) 
        then
            ColourNote("magenta", "", "You're not in Black Claw Crag!")
            return
        end
        
        dir = GetVariable("axaldra_dir") 
        if (dir == nil or dir == "")
        then
            ColourNote("magenta", "", "You don't know where Axaldra is!")
        else
            ColourNote("magenta", "", "Axaldra is hovering to the " , "magenta", "", dir, "magenta", "", "!")
        end
    end
    
    function in_blackclaw()
        area = tostring(gmcp("room.info.zone"))
        return (area == 'blackclaw')
    end
    
    function end_blackclaw()
        SetVariable("axaldra_dir", "")
        SaveState()
        AddTimer("axaldra_timer", 0, 20, 0, "", timer_flag.Enabled + timer_flag.OneShot + timer_flag.Replace, "end_timer")
        report_axaldra_runtime()
    end
    
    function end_timer()
       ColourNote("magenta", "", "You feel ready to challenge Axaldra again!") 
    end
    
    function report_axaldra_runtime()
        end_time = os.time()
        start_time = GetVariable("axaldra_start_time")
        if (start_time == nil or start_time == "" or start_time == 0)
        then
            ColourNote("magenta", "", "You have no idea how long that took!")
        else 
            final_runtime = end_time - start_time
            ColourNote("magenta", "", "Your battle with Axaldra took " .. convert_time_to_string(final_runtime) .. "!")
            total_runs = GetVariable("total_runs") or 0
            total_time = GetVariable("total_time") or 0
            best_time  = GetVariable("best_time")  or 0
                         
            total_runs = (total_runs == 0 and 1 or (total_runs + 1))
            total_time = (total_time == 0 and final_runtime or (total_time + final_runtime))
            
            -- Don't know why this doesn't work automatically? 
            if (tonumber(best_time) == 0 or tonumber(final_runtime) < tonumber(best_time))
            then
                best_time = final_runtime
            end
            
            SetVariable("total_runs", total_runs)
            SetVariable("total_time", total_time)
            SetVariable("best_time", best_time)
            SaveState()
            
        end

        SetVariable("axaldra_start_time", 0)
        SaveState()
    end
    
    function report_axaldra_timer()
        time_remaining = GetTimerInfo("axaldra_timer", 13)
        if (time_remaining == 0 or time_remaining == nil or time_remaining == "")
        then
            ColourNote("magenta", "", "You feel ready to challenge Axaldra again!") 
        else
            ColourNote("magenta", "", "You will be ready to challenge Axaldra again in ", 
            "magenta", "", convert_time_to_string(time_remaining), "magenta", "", "!") 
        end
    end
    
    function report_axaldra_run()
        if (in_blackclaw() == false) 
        then
            ColourNote("magenta", "", "You're not in Black Claw Crag!")
            return
        end
        
        start_time = GetVariable("axaldra_start_time")
        if (start_time == nil or start_time == "" or start_time == 0)
        then
            ColourNote("magenta", "", "You don't remember when you started battling Axaldra!")
            return
        else 
            end_time = os.time()
            ColourNote("magenta", "", "You have been battling Axaldra for " .. convert_time_to_string(end_time - start_time) .. "!")
        end
    end
    
    function convert_time_to_string (input_time)
        minutes = math.floor(input_time / 60)
        seconds = math.floor(input_time % 60)
        
        formatted_time = ""
        
        if (minutes > 0) then
            formatted_time = minutes .. "m"
        end
        
        formatted_time = formatted_time .. string.format("%02d", seconds) .. "s"
        return formatted_time
    end
    
    function store_weapon_stats (name, line, args, style)
        flag = args.flag
        if (args.flag == "") 
        then 
            flag = 'No Bonus' 
        end
       
        if (in_blackclaw() == false)
        then
            return
        end

        bonus_stats_str = GetVariable("bonus_stats") or "{}"
                
        lua_stmt = "bonus_stats = " .. bonus_stats_str
        assert(loadstring(lua_stmt or "")) ()
        
        wstat = (bonus_stats[flag] or 0) + 1
        bonus_stats[flag] = wstat

        var.bonus_stats = serialize.save_simple(bonus_stats)
        SaveState()
    end
    
    function axaldra_report_stats ()
        -- Total number of runs
        -- average time
        -- best time
        -- histogram of weapon stats
        --> Flag (count) (percentage) 
        
        total_runs = GetVariable("total_runs") or 0
        
        if (total_runs == 0 or total_runs == nil) 
        then
            ColourNote("magenta", "", "No runs recorded yet - try again later!")
            return
        end
        
        total_time = GetVariable("total_time") or ""
        best_time = GetVariable("best_time") or ""
        bonus_stats_str = GetVariable("bonus_stats") or {}
        
        lua_stmt = "bonus_stats = " .. bonus_stats_str
        assert(loadstring(lua_stmt or "")) ()
        
        ColourNote("magenta", "", "Black Claw Crag Stats")
        ColourNote("magenta", "", "---------------------------------")
        ColourNote("white", "", "Total Runs     : ", "white", "", string.format("%16s", total_runs))
        ColourNote("white", "", "Avg Run Time   : ", "white", "", string.format("%16s", convert_time_to_string( total_time / total_runs )))
        ColourNote("white", "", "Best Run Time  : ", "white", "", string.format("%16s", convert_time_to_string (best_time)))
        ColourNote("white", "", "")
        ColourNote("magenta", "", "Bonus Loots Stats - Count and Pct")
        ColourNote("magenta", "", "---------------------------------")
        
        table.sort(bonus_stats, table_compare)

        for flag, count in pairs(bonus_stats) do
            percent = string.format("%5s", format_percent(count, total_runs))
            ColourNote("white", "", string.format("%-15s", flag) .. 
                ": " .. string.format("%5s", count) .. "  (" .. percent .. "%)")
        end
    end

    function format_percent (num, denom)
        value = 0
        num = tonumber(num)
        denom = tonumber(denom)
        if (denom > 0) then
            value = (num / denom) * 100
        end

        return string.format("%.2f", value)
    end
    
    function table_compare (a, b)
        return a[2] > b[2]
    end
    
    function axaldra_debug ()
        Note("Internal variables:")
        for k, v in pairs (GetVariableList()) do 
            Note (k, " = ", v) 
        end
       
    end
    
    function ax_update_timer (name, line, args)
        if (in_blackclaw() == false) 
        then
            ColourNote("magenta", "", "You're not in Black Claw Crag!")
            return
        end
        
        minutes = args.minutes or 0
        seconds = args.seconds or 0
        
        time_remaining = GetTimerInfo("axaldra_timer", 13)
        if (time_remaining == 0 or time_remaining == nil or time_remaining == "")
        then
            -- Timer is out of sync, create one here
            AddTimer("axaldra_timer", 0, minutes, seconds, "", timer_flag.Enabled + timer_flag.OneShot + timer_flag.Replace, "end_timer")
        end
    end
    
    function axaldra_reset ()
        DeleteVariable("total_runs")
        DeleteVariable("total_time")
        DeleteVariable("best_time")
        DeleteVariable("bonus_stats")
        SaveState()
        ColourNote("magenta", "", "Reset all Black Claw Crag stats!")
    end

    function OnHelp ()
        ColourNote ("magenta", "", world.GetPluginInfo (world.GetPluginID (), 3))
    end
   
]]>


</script>


</muclient>
